{"version":3,"sources":["components/common/logosRefs/GitHubReference.tsx","components/common/logosRefs/LinkedInReference.tsx","components/common/logosRefs/QuestionMarkReference.tsx","components/common/bodyElements/BodyHeader.tsx","components/common/bodyElements/LoadPdfArea.tsx","components/common/interfaceButtons/CheckScaleOptionButton.tsx","components/common/interfaceButtons/SliceButton.tsx","types/DrawingFormats.tsx","components/common/options/SelectScaleOptions.tsx","components/common/options/SelectSliceOptions.tsx","config.ts","components/common/bodyElements/FormPart.tsx","lib/getSlicePdfFile.ts","components/common/bodyElements/InfoPdfArea.tsx","components/modals/ErrorInfoModal.tsx","components/common/interfaceButtons/RestartButton.tsx","components/modals/QuestionMarkInfoModal.tsx","components/common/interfaceButtons/DownloadButtonSlicedPdf.tsx","lib/deleteFileFromAWS.ts","App.tsx","lib/getDownloadFromAWS.ts","index.tsx"],"names":["navigateToGitHub","link","event","window","open","focus","GitHubReference","className","src","onClick","navigateToLinkedIn","LinkedInReference","QuestionMarkReference","setIsQuestionMarkInfoModalOpen","BodyHeader","text","LoadPdfArea","setIsPdfConfirmed","setPdfNumberOfPages","setPdfFormat","setIsErrorInfoModalOpen","setInfoModalMessage","setLoadedPdfFile","dragAndDropText","setloadedPdfFileName","setIsAppLoading","onDrop","useCallback","acceptedFiles","forEach","file","formData","FormData","append","Promise","resolve","reject","a","fetch","method","body","then","res","catch","error","sendFileOnBackend","response","JSON","parse","Status","NumberOfPages","DrawingFormat","toUpperCase","Filename","ErrorMessage","useDropzone","accept","getRootProps","getInputProps","CheckScaleOptionButton","ScaleButtonText","setScaleBeforeSlice","type","id","onChange","document","getElementById","disabled","checked","SliceButton","SliceButtonText","SliceFunction","DrawingFormats","SelectScaleOptions","setScaleToFormat","target","value","toLowerCase","map","drawingFormat","SelectSliceOptions","setSliceByFormat","config","BACKEND_SERVER","FormPart","LoadedPdfName","setIsSlicedPdfReadyOnAWS","useState","scaleBeforeSlice","scaleToFormat","sliceByFormat","requestParamsForSlice","filename","sliceLoadedPdfRequest","args","pdfHandleParameters","console","log","urlToFetch","stringify","InfoPdfArea","isPdfSinglePage","pdfInputFormat","Modal","setAppElement","ErrorInfoModal","isShown","infoMessage","onClose","alt","RestartButton","ResetButtonText","ClearStates","requestExampleData","blob","blobityBlob","blobUrl","URL","createObjectURL","createElement","href","setAttribute","appendChild","click","parentNode","removeChild","err","QuestionMarkInfoModal","DownloadButtonSlicedPdf","DownloadButtonText","PreparedSlicedPdf","RequestFileFromAws","RestartAppStates","deleteFileFromAWS","App","isPdfConfirmed","pdfNumberOfPages","pdfFormat","isErrorInfoModalOpen","infoModalMessage","isQuestionMarkInfoModalOpen","loadedPdfFileName","isSlicedPdfReadyOnAWS","isAppLoading","RestartApp","undefined","color","width","height","loading","fileResultPath","blobObj","blobbedObject","Blob","revokeObjectURL","toString","result","getDownloadFileFromAWS","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.41270dc0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst githubIcon = process.env.PUBLIC_URL + \"/githubIcon.png\";\r\n\r\nconst navigateToGitHub = (link: string)  => (event: any) => {\r\n    const win = window.open(link, '_blank');\r\n    win!.focus();\r\n};\r\n\r\nexport const GitHubReference: React.FC<{ link: string }> = ({link}) => {\r\n    return (\r\n        <div className=\"git-hub-ref\">\r\n            <img src={githubIcon} className=\"header--navbar-img\" onClick={navigateToGitHub(link)} />\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\n\r\nconst linkedInIcon = process.env.PUBLIC_URL + \"/linkedinIcon.png\";\r\n\r\nconst navigateToLinkedIn = (link: string) => (event: any) => {\r\n    const win = window.open(link, '_blank');\r\n    win!.focus();\r\n};\r\n\r\nexport const LinkedInReference: React.FC<{ link: string }> = ({link}) => {\r\n    return (\r\n        <div className=\"linked-in-ref\" >\r\n            <img src={linkedInIcon} className=\"header--navbar-img\" onClick={navigateToLinkedIn(link)} />\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\n\r\nconst questionMarkIcon = process.env.PUBLIC_URL + \"/questionmarkIcon.png\";\r\n\r\ninterface QuestionMarkReferencelProps {\r\n    setIsQuestionMarkInfoModalOpen: Function;\r\n}\r\n\r\nexport const QuestionMarkReference: React.FC<QuestionMarkReferencelProps> = ({setIsQuestionMarkInfoModalOpen}) => {\r\n\r\n    const invokeQuestionMark = () => setIsQuestionMarkInfoModalOpen(true)\r\n\r\n    return (\r\n        <div className=\"question-mark-icon\" onClick={invokeQuestionMark}>\r\n            <img src={questionMarkIcon} className=\"header--navbar-img\"/>\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\n\r\nexport const BodyHeader: React.FC<{ text: string }> = ({ text }) => {\r\n    return (\r\n        <h1>{text}</h1>\r\n    );\r\n};","import React, { useState, useCallback } from \"react\";\r\nimport { useDropzone } from 'react-dropzone';\r\n\r\n\r\ninterface PageAreaInfs {\r\n    setIsPdfConfirmed: Function;\r\n    setPdfNumberOfPages: Function;\r\n    setPdfFormat: Function;\r\n    setIsErrorInfoModalOpen: Function;\r\n    setInfoModalMessage: Function;\r\n    setLoadedPdfFile: Function;\r\n    setloadedPdfFileName: Function;\r\n    setIsAppLoading: Function;\r\n    dragAndDropText: string;\r\n}\r\n\r\nexport const LoadPdfArea: React.FC<PageAreaInfs> = ({ setIsPdfConfirmed, setPdfNumberOfPages, setPdfFormat, setIsErrorInfoModalOpen, setInfoModalMessage, setLoadedPdfFile, dragAndDropText, setloadedPdfFileName, setIsAppLoading }) => {\r\n\r\n    function sendFileOnBackend(file: any): Promise<any> {\r\n        setIsAppLoading(true)\r\n        let formData = new FormData();\r\n        setLoadedPdfFile(formData);\r\n        formData.append('pdffile', file);\r\n\r\n        return new Promise(async (resolve, reject) => {\r\n\r\n            const urlToFetch =  process.env.NODE_ENV === 'production'?  \"https://drawing-slicer.herokuapp.com/testfile\" : \"http://localhost:5050/testfile\";\r\n\r\n            fetch(urlToFetch, {\r\n                method: 'POST',\r\n                body: formData\r\n            })\r\n                .then(res => {\r\n                    setIsAppLoading(false)\r\n                    resolve(res.text())\r\n                })\r\n                .catch((error) => {\r\n                    setIsAppLoading(false)\r\n                    reject(error)\r\n                });\r\n        });\r\n    }\r\n\r\n    const onDrop = useCallback((acceptedFiles) => {\r\n        acceptedFiles.forEach((file: any) => {\r\n            sendFileOnBackend(acceptedFiles[0])\r\n                .then(response => {\r\n                    response = JSON.parse(response);\r\n\r\n                    if (response.Status === \"Success\") {\r\n                        setIsPdfConfirmed(true);\r\n                        setPdfNumberOfPages(response.NumberOfPages);\r\n                        setPdfFormat(response.DrawingFormat.toUpperCase())\r\n                        setloadedPdfFileName(response.Filename)\r\n                    } else {\r\n                        setInfoModalMessage(response.ErrorMessage)\r\n                        setIsErrorInfoModalOpen(true)\r\n                    }\r\n                });\r\n        });\r\n    }, [])\r\n\r\n    const { getRootProps, getInputProps } = useDropzone({ accept: \"application/pdf\", onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()}>\r\n            <input{...getInputProps()} />\r\n            <p>{dragAndDropText}</p>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\ninterface ButtonOptions {\r\n    ScaleButtonText: string;\r\n    setScaleBeforeSlice: Function;\r\n}\r\n\r\nexport const CheckScaleOptionButton: React.FC<ButtonOptions> = ({ ScaleButtonText, setScaleBeforeSlice }) => {\r\n\r\n    const isCheckedScaleOption = () => {\r\n        (document.getElementById(\"scale-format-options\") as HTMLSelectElement).disabled = false;\r\n        if ((document.getElementById(\"check-scale-options-button-id\") as HTMLInputElement).checked) {\r\n            (document.getElementById(\"scale-format-options\") as HTMLSelectElement).disabled = false;\r\n            setScaleBeforeSlice(true);\r\n        } else {\r\n            (document.getElementById(\"scale-format-options\") as HTMLSelectElement).disabled = true;\r\n            setScaleBeforeSlice(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"check-scale-options-button\">\r\n            <label>{ScaleButtonText}</label>\r\n            <input type=\"checkbox\" id=\"check-scale-options-button-id\" onChange={() => isCheckedScaleOption()} />\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\n\r\ninterface ButtonOptions {\r\n    SliceButtonText: string;\r\n    SliceFunction: Function;\r\n}\r\n\r\n\r\nexport const SliceButton: React.FC<ButtonOptions> = ({ SliceButtonText, SliceFunction}) => {\r\n    \r\n    const invokeFetchFunction = () => SliceFunction()\r\n\r\n    return (\r\n        <div className=\"slice-button\">\r\n            <button onClick={invokeFetchFunction}>{SliceButtonText}</button>\r\n        </div>\r\n    );\r\n};","export const DrawingFormats = [\"A0\", \"A1\", \"A2\", \"A3\", \"A4\", \"A5\", \"A6\", \"A7\", \"A8\"]","import React from \"react\";\r\nimport { DrawingFormats } from '../../../types/DrawingFormats';\r\n\r\ninterface ScaleOptionsProps {\r\n    setScaleToFormat: Function;\r\n}\r\n\r\nexport const SelectScaleOptions: React.FC<ScaleOptionsProps> = ({ setScaleToFormat }) => {\r\n    const setScaleOption = (event:any) => setScaleToFormat(event.target.value.toLowerCase());\r\n    return (\r\n        <select id=\"scale-format-options\" disabled onChange={setScaleOption}>\r\n            {DrawingFormats.map((drawingFormat) => <option key={drawingFormat} value={drawingFormat}>{drawingFormat}</option>)}\r\n        </select>\r\n    );\r\n};\r\n\r\n","import React from \"react\";\r\nimport { DrawingFormats } from '../../../types/DrawingFormats';\r\n\r\ninterface SliceOptionsProps {\r\n    setSliceByFormat: Function;\r\n}\r\n\r\nexport const SelectSliceOptions: React.FC<SliceOptionsProps> = ({setSliceByFormat}) => {\r\n    const setSliceOption = (event:any) => setSliceByFormat(event.target.value.toLowerCase());\r\n    return (\r\n            <select id=\"slice-format-options\" onChange={setSliceOption}>\r\n                {DrawingFormats.map((drawingFormat) => <option key={drawingFormat} value={drawingFormat}>{drawingFormat}</option>)}\r\n            </select>\r\n    );\r\n};\r\n\r\n","interface configVariablesInterface {\r\n    BACKEND_SERVER: string\r\n}\r\n\r\nconst config: configVariablesInterface = {\r\n    BACKEND_SERVER: (process.env.NODE_ENV === 'production') ? \"https://drawing-slicer.herokuapp.com/\":\"http://localhost:5050/\" \r\n}\r\n\r\nexport default config;\r\n\r\n","import React, { useState } from \"react\";\r\nimport { CheckScaleOptionButton } from '../interfaceButtons/CheckScaleOptionButton';\r\nimport { SliceButton } from \"../interfaceButtons/SliceButton\";\r\nimport { SelectScaleOptions } from \"../options/SelectScaleOptions\";\r\nimport { SelectSliceOptions } from \"../options/SelectSliceOptions\";\r\nimport { DrawingFormats } from '../../../types/DrawingFormats';\r\nimport getSlicePdfFile from '../../../lib/getSlicePdfFile';\r\nimport SliceDrawingParameters from '../../../types/sliceDrawingParameters';\r\n\r\ninterface PageAreaInfs {\r\n    ScaleButtonText: string;\r\n    SliceButtonText: string;\r\n    LoadedPdfName: undefined | string;\r\n    setIsErrorInfoModalOpen: Function;\r\n    setInfoModalMessage: Function;\r\n    setIsSlicedPdfReadyOnAWS: Function\r\n    setIsAppLoading: Function\r\n}\r\n\r\nexport const FormPart: React.FC<PageAreaInfs> = ({ ScaleButtonText, SliceButtonText, LoadedPdfName, setIsErrorInfoModalOpen, setInfoModalMessage, setIsSlicedPdfReadyOnAWS, setIsAppLoading }) => {\r\n\r\n    const [scaleBeforeSlice, setScaleBeforeSlice] = useState<boolean>(() => false);\r\n    const [scaleToFormat, setScaleToFormat] = useState<string>(() => DrawingFormats[0].toLowerCase());\r\n    const [sliceByFormat, setSliceByFormat] = useState<string>(() => DrawingFormats[0].toLowerCase());\r\n\r\n    const requestParamsForSlice: SliceDrawingParameters = {\r\n        scaleBeforeSlice,\r\n        scaleToFormat,\r\n        sliceByFormat,\r\n        filename: LoadedPdfName\r\n    }\r\n\r\n    function sliceLoadedPdfRequest(args: SliceDrawingParameters):void {\r\n        setIsAppLoading(true)\r\n        setIsSlicedPdfReadyOnAWS(false)\r\n        getSlicePdfFile(args)\r\n            .then(response => response.text())\r\n            .then(response => JSON.parse(response))\r\n            .then(response => {\r\n                if (response.Status === \"Fail\") {\r\n                    setIsAppLoading(false)\r\n                    setInfoModalMessage(response.ErrorMessage)\r\n                    setIsErrorInfoModalOpen(true)\r\n                    setIsSlicedPdfReadyOnAWS(false)\r\n                } else {\r\n                    setIsAppLoading(false)\r\n                    setIsSlicedPdfReadyOnAWS(true)\r\n                }\r\n            })\r\n            .catch(error => {\r\n                setIsAppLoading(false)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"form-container--scalefrom\">\r\n                <CheckScaleOptionButton\r\n                    ScaleButtonText={ScaleButtonText}\r\n                    setScaleBeforeSlice={(value: boolean) => setScaleBeforeSlice(value)}\r\n                />\r\n                <SelectScaleOptions\r\n                    setScaleToFormat={(value: string) => setScaleToFormat(value)}\r\n                />\r\n            </div>\r\n            <div className=\"form-container--sliceform\">\r\n                <SliceButton\r\n                    SliceButtonText={SliceButtonText}\r\n                    SliceFunction={() => sliceLoadedPdfRequest(requestParamsForSlice)}\r\n                />\r\n                <SelectSliceOptions\r\n                    setSliceByFormat={(value: string) => setSliceByFormat(value)}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};","import config from '../config';\r\nimport SliceDrawingParameters from '../types/sliceDrawingParameters';\r\n\r\nexport default function getSlicePdfFile(pdfHandleParameters: SliceDrawingParameters): Promise<(any)> {\r\n\r\n    console.log(\"...requestingParamsToSlicePdf...\");\r\n\r\n    return new Promise((resolve, reject) => {\r\n        const urlToFetch = `${config.BACKEND_SERVER}slice/${JSON.stringify(pdfHandleParameters)}`\r\n        fetch(urlToFetch, {\r\n            method: 'GET',\r\n        })\r\n            .then(resolve)\r\n            .catch(error => reject(error))\r\n    })\r\n}","import React from \"react\";\r\n\r\ninterface PageAreaInfs {\r\n    isPdfSinglePage: any;\r\n    pdfInputFormat: any;\r\n}\r\n\r\nexport const InfoPdfArea: React.FC<PageAreaInfs> = ({isPdfSinglePage, pdfInputFormat}) => {\r\n    return (\r\n        <section>\r\n            <p> PDF has {isPdfSinglePage} page.</p>\r\n            <p> PDF input format is in {pdfInputFormat} format.</p>\r\n        </section>         \r\n    );\r\n};","import React from 'react';\r\nimport Modal from 'react-modal';\r\nimport './ErrorInfoModal.css';\r\n\r\nconst closeIcon = process.env.PUBLIC_URL + \"/closeIcon.png\";\r\n\r\nModal.setAppElement('#root');\r\n\r\ninterface ErrorInfoModalProps {\r\n    isShown: boolean;\r\n    infoMessage: undefined | string;\r\n    onClose: () => void;\r\n}\r\n\r\nexport const ErrorInfoModal: React.FC<ErrorInfoModalProps> = ({ isShown, infoMessage, onClose }) => \r\n    isShown ? \r\n    <div className=\"modal\">\r\n        <div className=\"modal-overlay\">\r\n            <div className=\"modal-box\">\r\n                <div className=\"modal-close btn\" >\r\n                    <img src={closeIcon} className=\"close-modal-img\" alt={'Close modal'} onClick={onClose} />\r\n                </div>\r\n                <div className=\"modal-text\">\r\n                    <p>{infoMessage}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div> : null;\r\n\r\n\r\n","import React from \"react\";\r\n\r\ninterface ButtonOptions {\r\n    ResetButtonText: string;\r\n    ClearStates: Function;\r\n}\r\n\r\nexport const RestartButton: React.FC<ButtonOptions> = ({ ResetButtonText, ClearStates }) => {\r\n\r\n    const invokeClearingStates = () => ClearStates()\r\n\r\n    return (\r\n        <div>\r\n            <button className=\"btn__restart\" onClick={invokeClearingStates}>{ResetButtonText}</button>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport Modal from 'react-modal';\r\nimport './QuestionMarkInfoModal.css';\r\n\r\nconst closeIcon = process.env.PUBLIC_URL + \"/closeIcon.png\";\r\nconst downloadIcon = process.env.PUBLIC_URL + \"/downloadIcon.png\";\r\n\r\nModal.setAppElement('#root');\r\n\r\ninterface QuestionMarkInfoModalProps {\r\n    isShown: boolean;\r\n    onClose: () => void;\r\n}\r\n\r\nconst requestExampleData = (): Promise<(string)> => {\r\n    console.log(\"...askingForExamplePDF...\");\r\n    return new Promise(async (resolve, reject) => {\r\n\r\n        const urlToFetch =  process.env.NODE_ENV === 'production'?  \"https://drawing-slicer.herokuapp.com/exampledata\" : \"http://localhost:5050/exampledata\";\r\n\r\n        fetch(urlToFetch, {\r\n            method: 'GET',\r\n        })\r\n            .then(response => response.blob())\r\n            .then(blobityBlob => {\r\n                const blobUrl = window.URL.createObjectURL(blobityBlob);\r\n                const link = document.createElement('a');\r\n                link.href = blobUrl;\r\n                link.setAttribute('download', 'resultedSlicedPdf.zip');\r\n                document.body.appendChild(link);\r\n                link.click();\r\n                link.parentNode!.removeChild(link);\r\n            })\r\n            .catch(err => reject(err))\r\n    })\r\n}\r\n\r\nexport const QuestionMarkInfoModal: React.FC<QuestionMarkInfoModalProps> = ({ isShown, onClose }) =>\r\n    isShown ?\r\n        <div className=\"modal\">\r\n            <div className=\"modal-overlay\">\r\n                <div className=\"modal-box\">\r\n                    <div className=\"modal-close btn\" >\r\n                        <img src={closeIcon} className=\"close-modal-img\" alt={'Close modal'} onClick={onClose} />\r\n                    </div>\r\n                    <div className=\"modal-text\">\r\n                        <h2>What is Drawing Slicer ?</h2>\r\n                        <p>Drawing slicer is single web page application, which may slice your giant formats (A1 or A0) to multiple A4 (or any smaller) formats ! Then you are able to print your drawing on home printer and glue the piecies together.</p>\r\n                        <h2>I would like to only test it</h2>\r\n                        <p>In case you just want to test the functionality of the application and have not any drawings you can try download files in attachment below.</p>\r\n                    </div>\r\n                    <div className=\"modal-download btn\" >\r\n                        <img src={downloadIcon} className=\"download-pdf-img\" alt={'Download PDF'} onClick={requestExampleData} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div> : null;\r\n\r\n\r\n","import React from \"react\";\r\n\r\ninterface ButtonOptions {\r\n    DownloadButtonText: string;\r\n    PreparedSlicedPdf: undefined | string;\r\n    RequestFileFromAws: Function;\r\n    RestartAppStates: Function;\r\n    setIsAppLoading: Function;\r\n}\r\n\r\nexport const DownloadButtonSlicedPdf: React.FC<ButtonOptions> = ({ DownloadButtonText, PreparedSlicedPdf, RequestFileFromAws, RestartAppStates, setIsAppLoading }) => {\r\n\r\n    const changeStates = () => {\r\n        setIsAppLoading(true)\r\n        RestartAppStates()\r\n        RequestFileFromAws(PreparedSlicedPdf)\r\n        .then(setIsAppLoading(false))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button className=\"btn__download\" onClick={() => changeStates()}>{DownloadButtonText}</button>\r\n        </div>\r\n    );\r\n};","import config from '../config';\r\n\r\nexport default function deleteFileFromAWS (): void  {\r\n\r\n    console.log(\"...sendingRequestToClearBackendStorage...\");\r\n    \r\n    const urlToFetch = `${config.BACKEND_SERVER}clearawsbucket`\r\n    fetch(urlToFetch)\r\n\r\n}","import React, { useState } from 'react';\nimport './App.css';\nimport { BarLoader } from 'react-spinners';\nimport { GitHubReference } from './components/common/logosRefs/GitHubReference';\nimport { LinkedInReference } from './components/common/logosRefs/LinkedInReference';\nimport { QuestionMarkReference } from './components/common/logosRefs/QuestionMarkReference';\nimport { BodyHeader } from './components/common/bodyElements/BodyHeader';\nimport { LoadPdfArea } from './components/common/bodyElements/LoadPdfArea';\nimport { FormPart } from './components/common/bodyElements/FormPart';\nimport { InfoPdfArea } from './components/common/bodyElements/InfoPdfArea';\nimport { ErrorInfoModal } from './components/modals/ErrorInfoModal';\nimport { RestartButton } from './components/common/interfaceButtons/RestartButton';\nimport { QuestionMarkInfoModal } from './components/modals/QuestionMarkInfoModal';\nimport { DownloadButtonSlicedPdf } from './components/common/interfaceButtons/DownloadButtonSlicedPdf';\nimport getDownloadFileFromAWS from './lib/getDownloadFromAWS';\n\n\nfunction App() {\n\n  const [isPdfConfirmed, setIsPdfConfirmed] = useState<boolean>(() => false);\n  const [pdfNumberOfPages, setPdfNumberOfPages] = useState<string | undefined>(() => undefined);\n  const [pdfFormat, setPdfFormat] = useState<string | undefined>(() => undefined);\n\n  const [isErrorInfoModalOpen, setIsErrorInfoModalOpen] = useState<boolean>(() => false);\n  const [infoModalMessage, setInfoModalMessage] = useState<string | undefined>(() => undefined);\n\n  const [isQuestionMarkInfoModalOpen, setIsQuestionMarkInfoModalOpen] = useState<boolean>(() => false);\n\n  const [loadedPdfFile, setLoadedPdfFile] = useState<undefined | File>(() => undefined);\n  const [loadedPdfFileName, setloadedPdfFileName] = useState<undefined | string>(() => undefined);\n  const [isSlicedPdfReadyOnAWS, setIsSlicedPdfReadyOnAWS] = useState<boolean>(() => false);\n\n  const [isAppLoading, setIsAppLoading] = useState<boolean>(() => false);\n\n  const toggleErrorInfoModal = () => setIsErrorInfoModalOpen(!isErrorInfoModalOpen);\n  const toggleQuestionMarkInfoModal = () => setIsQuestionMarkInfoModalOpen(!isQuestionMarkInfoModalOpen);\n\n  function RestartApp() {\n    setIsPdfConfirmed(false);\n    setPdfNumberOfPages(undefined);\n    setPdfFormat(undefined);\n    setLoadedPdfFile(undefined);\n    setloadedPdfFileName(undefined);\n    setIsSlicedPdfReadyOnAWS(false)\n  }\n\n  return (\n    <div className=\"App\">\n\n      <div className=\"Header\">\n        < QuestionMarkReference\n          setIsQuestionMarkInfoModalOpen={(value: boolean) => setIsQuestionMarkInfoModalOpen(value)}\n        />\n        < LinkedInReference link={\"https://www.linkedin.com/in/juraj-zovinec/\"} />\n        < GitHubReference link={\"https://github.com/Jurajzovinec/drawing-slicer\"} />\n      </div>\n\n      <div className=\"Body\">\n\n        <div className=\"body--header\">\n          <BodyHeader text={\"Welcome to Drawing Slicer\"} />\n          <div className=\"body--header--barloader\">\n            <BarLoader color={\"yellow\"} width={500} height={1} loading={isAppLoading} />\n          </div>\n        </div>\n\n        <div className=\"body--userinterface\">\n          {\n            !isPdfConfirmed ?\n              <div className=\"userinterface--loadpdfarea-container\">\n                <LoadPdfArea\n                  setIsPdfConfirmed={(value: boolean) => setIsPdfConfirmed(value)}\n                  setPdfNumberOfPages={(value: string) => setPdfNumberOfPages(value)}\n                  setPdfFormat={(value: string) => setPdfFormat(value)}\n                  setInfoModalMessage={(value: string | undefined) => setInfoModalMessage(value)}\n                  setIsErrorInfoModalOpen={(value: boolean) => setIsErrorInfoModalOpen(value)}\n                  setLoadedPdfFile={(value: any) => setLoadedPdfFile(value)}\n                  setloadedPdfFileName={(value: any) => setloadedPdfFileName(value)}\n                  setIsAppLoading={(value: boolean) => setIsAppLoading(value)}\n                  dragAndDropText={\"Drag and drop your PDF drawing here.\"} />\n              </div> : null\n          }\n\n          {\n            isPdfConfirmed ?\n              <div className=\"userinterface--infopdfarea-container\">\n                <InfoPdfArea isPdfSinglePage={pdfNumberOfPages} pdfInputFormat={pdfFormat} />\n              </div> : null\n          }\n\n          <div className=\"userinterface--form-container\" {...!isPdfConfirmed ? { \"aria-disabled\": true } : {}}>\n            <FormPart\n              ScaleButtonText={\"Scale before slice ? \"}\n              SliceButtonText={\"Slice drawing\"}\n              LoadedPdfName={loadedPdfFileName}\n              setInfoModalMessage={(value: string | undefined) => setInfoModalMessage(value)}\n              setIsErrorInfoModalOpen={(value: boolean) => setIsErrorInfoModalOpen(value)}\n              setIsSlicedPdfReadyOnAWS={(value: boolean) => setIsSlicedPdfReadyOnAWS(value)}\n              setIsAppLoading={(value: boolean) => setIsAppLoading(value)}\n            />\n          </div>\n        </div>\n\n        <div>\n          <ErrorInfoModal\n            isShown={isErrorInfoModalOpen}\n            infoMessage={infoModalMessage}\n            onClose={toggleErrorInfoModal}\n          />\n        </div>\n        <div>\n          <QuestionMarkInfoModal\n            isShown={isQuestionMarkInfoModalOpen}\n            onClose={toggleQuestionMarkInfoModal}\n          />\n        </div>\n        <div className=\"body--footercontrolbuttons-container\">\n          <div className=\"footercontrolbuttons-container--restartbutton-container\">\n            {isPdfConfirmed ?\n              <RestartButton ClearStates={() => RestartApp()} ResetButtonText={'Restart'} /> : null\n            }\n          </div>\n          <div className=\"footercontrolbuttons-container--downloadbutton-container\">\n            {isSlicedPdfReadyOnAWS ?\n              <DownloadButtonSlicedPdf\n                PreparedSlicedPdf={loadedPdfFileName}\n                RestartAppStates={()=>RestartApp()}\n                RequestFileFromAws={() => getDownloadFileFromAWS(loadedPdfFileName)}\n                DownloadButtonText={\"Download sliced pdf\"}\n                setIsAppLoading={(value: boolean) => setIsAppLoading(value)}\n              /> : null\n\n            }\n          </div>\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import config from '../config';\r\nimport deleteFileFromAWS from './deleteFileFromAWS';\r\n\r\nexport default function getDownloadFileFromAWS(fileResultPath: string | any): Promise<(string)> {\r\n\r\n    console.log(\"...askingForResultPDF...\");\r\n\r\n    const urlToFetch = `${config.BACKEND_SERVER}filedownload/{\"requestedFileName\":\"${fileResultPath}\"}`;\r\n\r\n    return new Promise(async (resolve, reject) => {\r\n        fetch(urlToFetch, {\r\n            method: 'GET',\r\n        })\r\n            .then(response => response.blob())\r\n            .then(blobObj => {\r\n                const blobbedObject = new Blob([blobObj])\r\n                const blobUrl = window.URL.createObjectURL(blobbedObject);\r\n                const link = document.createElement('a');\r\n                link.href = blobUrl;\r\n                link.setAttribute('download', `SlicedByDrawingSlicer_${fileResultPath}`);\r\n                document.body.appendChild(link);\r\n                link.click();\r\n                link.parentNode!.removeChild(link);\r\n                window.URL.revokeObjectURL(blobObj.toString());\r\n                return 'OK'\r\n            })\r\n            .then(result => {\r\n                if (result === 'OK') {\r\n                    deleteFileFromAWS()\r\n                    resolve(result)\r\n                } else {\r\n                    reject('File was not downloaded correctly.')\r\n                }\r\n            })\r\n            .catch(err => reject(err))\r\n    })\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}